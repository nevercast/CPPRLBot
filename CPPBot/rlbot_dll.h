#pragma once
#include <iostream>
#include <Windows.h>
#include "ByteBuffer.h"
#include "PacketStructs/PacketStructs.hpp"
#include "ErrorCodes/ErrorCodes.hpp"
#include "flatbuffers/flatbuffers.h"
#include "FlatbufferTranslator.hpp"
#include "rlbot_generated.h"
#include <vector>
#include <thread>

// Could this be done better with templates? I don't know how to use templates, I don't even know what they are.
#define RLBOT_API(RETURN_TYPE, FUNC_NAME, ...) typedef RETURN_TYPE( __cdecl *RLPROC_##FUNC_NAME) (__VA_ARGS__); RLPROC_##FUNC_NAME FUNC_NAME = nullptr
#define RLBOT_API_LOAD(RLBOT_DLL, FUNC_NAME) \
	FUNC_NAME = (RLPROC_##FUNC_NAME)GetProcAddress(RLBOT_DLL, #FUNC_NAME); \
	if (!FUNC_NAME) { \
		std::cout << "Failed to get " << #FUNC_NAME << ", is it even exported?\n"; \
		std::exit(-2); \
	}

// I don't know why there is a warning here, I'm ignoring it.
RLBOT_API(bool, IsInitialized);
RLBOT_API(ByteBuffer, UpdateFieldInfoFlatbuffer);
RLBOT_API(RLBotCoreStatus, UpdatePlayerInputFlatbuffer, void* playerInputFlatBuf, int flatBufSize);
RLBOT_API(ByteBuffer, UpdateLiveDataPacketFlatbuffer);
RLBOT_API(void, Free, void *ptr);
RLBOT_API(RLBotCoreStatus, RenderGroup, void* renderFlatBuf, int flatBufSize);


void LoadRLBot() {
	auto rlbot_dll = LoadLibrary(TEXT("..\\RLBot_Core_Interface.dll")); 
	if (!rlbot_dll) {
		std::cout << "Failed to load RLBot DLL.\n";
		std::exit(-1);
	} else {
		std::cout << "RLBot DLL: " << rlbot_dll;
		
		RLBOT_API_LOAD(rlbot_dll, IsInitialized);
		RLBOT_API_LOAD(rlbot_dll, UpdateFieldInfoFlatbuffer);
		RLBOT_API_LOAD(rlbot_dll, UpdatePlayerInputFlatbuffer);
		RLBOT_API_LOAD(rlbot_dll, UpdateLiveDataPacketFlatbuffer);
		RLBOT_API_LOAD(rlbot_dll, Free);
		RLBOT_API_LOAD(rlbot_dll, RenderGroup);

		// TODO Wait for IsInitialized to be true, and consider timing out.
	}
}

void FreeByteBuffer(ByteBuffer buf) {
	Free(buf.ptr);
}

void SetPlayerControls(PlayerInput input, int playerIndex) {
	flatbuffers::FlatBufferBuilder fbBuilder;
	FlatbufferTranslator::inputStructToFlatbuffer(&fbBuilder, input, playerIndex);
	auto fbPointer = fbBuilder.GetBufferPointer();
	auto fbSize = fbBuilder.GetSize();
	UpdatePlayerInputFlatbuffer(fbPointer, fbSize);
}

void DrawText2D(/* Please implement */) {

	flatbuffers::FlatBufferBuilder fbBuilder;
	auto color = rlbot::flat::CreateColor(fbBuilder, 0xFF, 0xFF); 
	auto vec3 = rlbot::flat::Vector3(0, 0, 0);

	auto renderMessage = rlbot::flat::CreateRenderMessageDirect(fbBuilder,
		rlbot::flat::RenderType::RenderType_DrawString2D,
		color,&vec3 ,&vec3,1,1,
		"Hello C++",
		false);
	
	const std::vector<flatbuffers::Offset<rlbot::flat::RenderMessage>> messages = { renderMessage };
	auto renderGroup = rlbot::flat::CreateRenderGroupDirect(fbBuilder, &messages); 
	
	fbBuilder.Finish(renderGroup); 
	auto pointer = fbBuilder.GetBufferPointer();
	auto size = fbBuilder.GetSize();

	RenderGroup(pointer, size);
}

void DrawLine3D(rlbot::flat::Vector3 start, rlbot::flat::Vector3 end, int32_t renderId = 0) {
	flatbuffers::FlatBufferBuilder fbBuilder;
	auto color = rlbot::flat::CreateColor(fbBuilder, 0xFF, 0x00, 0x00, 0xFF);
	auto vec3 = rlbot::flat::Vector3(0, 0, 0);

	auto renderMessage = rlbot::flat::CreateRenderMessageDirect(fbBuilder,
		rlbot::flat::RenderType::RenderType_DrawLine3D,
		color, &start, &end, 1, 1);

	const std::vector<flatbuffers::Offset<rlbot::flat::RenderMessage>> messages = { renderMessage };
	auto renderGroup = rlbot::flat::CreateRenderGroupDirect(fbBuilder, &messages, renderId);

	fbBuilder.Finish(renderGroup);
	auto pointer = fbBuilder.GetBufferPointer();
	auto size = fbBuilder.GetSize();

	RenderGroup(pointer, size);
}

void DrawTeapot(rlbot::flat::Vector3 center, float scale) {

	float x = center.x(), y = center.y(), z = center.z();

	std::vector<rlbot::flat::Vector3> verticies;
	std::vector<std::tuple<int, std::vector<int>>> faces;

#define TEAPOT_VERTEX(_X, _Y, _Z) verticies.push_back(rlbot::flat::Vector3(x + _X * scale, y + _Y * scale, z + _Z * scale))
	{
		TEAPOT_VERTEX(0.0f, 0.0f, 0.488037f);
		TEAPOT_VERTEX(0.00390625f, 0.0421881f, 0.476326f);
		TEAPOT_VERTEX(0.00390625f, -0.0421881f, 0.476326f);
		TEAPOT_VERTEX(0.0107422f, 0.0f, 0.575333f);
		TEAPOT_VERTEX(0.0125f, 0.0562508f, 0.450561f);
		TEAPOT_VERTEX(0.0125f, -0.0562508f, 0.450561f);
		TEAPOT_VERTEX(0.0195312f, 0.0f, 0.413654f);
		TEAPOT_VERTEX(0.0210938f, 0.0421881f, 0.424797f);
		TEAPOT_VERTEX(0.0210938f, -0.0421881f, 0.424797f);
		TEAPOT_VERTEX(0.025f, 0.0f, 0.413086f);
		TEAPOT_VERTEX(0.03875f, 0.19625f, 0.488037f);
		TEAPOT_VERTEX(0.03875f, -0.19625f, 0.488037f);
		TEAPOT_VERTEX(0.0390625f, 0.0f, 0.66803f);
		TEAPOT_VERTEX(0.0486597f, 0.192034f, 0.575333f);
		TEAPOT_VERTEX(0.0486597f, -0.192034f, 0.575333f);
		TEAPOT_VERTEX(0.0567676f, 0.188584f, 0.413654f);
		TEAPOT_VERTEX(0.0567676f, -0.188584f, 0.413654f);
		TEAPOT_VERTEX(0.0625f, 0.0f, 0.358795f);
		TEAPOT_VERTEX(0.0747852f, 0.180918f, 0.66803f);
		TEAPOT_VERTEX(0.0747852f, -0.180918f, 0.66803f);
		TEAPOT_VERTEX(0.0791016f, 0.0f, 0.764481f);
		TEAPOT_VERTEX(0.0964063f, 0.171719f, 0.358795f);
		TEAPOT_VERTEX(0.0964063f, -0.171719f, 0.358795f);
		TEAPOT_VERTEX(0.1f, 0.0f, 0.769043f);
		TEAPOT_VERTEX(0.103906f, 0.0421881f, 0.777779f);
		TEAPOT_VERTEX(0.103906f, -0.0421881f, 0.777779f);
		TEAPOT_VERTEX(0.105469f, 0.0f, 0.32156f);
		TEAPOT_VERTEX(0.111721f, 0.165203f, 0.764481f);
		TEAPOT_VERTEX(0.111721f, -0.165203f, 0.764481f);
		TEAPOT_VERTEX(0.1125f, 0.0562508f, 0.796997f);
		TEAPOT_VERTEX(0.1125f, -0.0562508f, 0.796997f);
		TEAPOT_VERTEX(0.121094f, 0.0421881f, 0.816215f);
		TEAPOT_VERTEX(0.121094f, -0.0421881f, 0.816215f);
		TEAPOT_VERTEX(0.125f, 0.0f, 0.300049f);
		TEAPOT_VERTEX(0.125f, 0.0f, 0.824951f);
		TEAPOT_VERTEX(0.125f, 0.0f, 0.863037f);
		TEAPOT_VERTEX(0.136045f, 0.154853f, 0.32156f);
		TEAPOT_VERTEX(0.136045f, -0.154853f, 0.32156f);
		TEAPOT_VERTEX(0.137695f, 0.0f, 0.881027f);
		TEAPOT_VERTEX(0.145f, 0.355f, 0.488037f);
		TEAPOT_VERTEX(0.145f, -0.355f, 0.488037f);
		TEAPOT_VERTEX(0.149219f, 0.0f, 0.887024f);
		TEAPOT_VERTEX(0.15f, 0.0f, 0.863037f);
		TEAPOT_VERTEX(0.152627f, 0.347373f, 0.575333f);
		TEAPOT_VERTEX(0.152627f, -0.347373f, 0.575333f);
		TEAPOT_VERTEX(0.154062f, 0.147187f, 0.300049f);
		TEAPOT_VERTEX(0.154062f, 0.147187f, 0.863037f);
		TEAPOT_VERTEX(0.154062f, -0.147187f, 0.300049f);
		TEAPOT_VERTEX(0.154062f, -0.147187f, 0.863037f);
		TEAPOT_VERTEX(0.154883f, 0.0f, 0.881027f);
		TEAPOT_VERTEX(0.158867f, 0.341133f, 0.413654f);
		TEAPOT_VERTEX(0.158867f, -0.341133f, 0.413654f);
		TEAPOT_VERTEX(0.165774f, 0.142205f, 0.881027f);
		TEAPOT_VERTEX(0.165774f, -0.142204f, 0.881027f);
		TEAPOT_VERTEX(0.172734f, 0.327266f, 0.66803f);
		TEAPOT_VERTEX(0.172734f, -0.327266f, 0.66803f);
		TEAPOT_VERTEX(0.175f, 0.0f, 0.863037f);
		TEAPOT_VERTEX(0.176404f, 0.137682f, 0.887024f);
		TEAPOT_VERTEX(0.176404f, -0.137681f, 0.887024f);
		TEAPOT_VERTEX(0.177125f, 0.137375f, 0.863037f);
		TEAPOT_VERTEX(0.177125f, -0.137375f, 0.863037f);
		TEAPOT_VERTEX(0.181629f, 0.135459f, 0.881027f);
		TEAPOT_VERTEX(0.181629f, -0.135458f, 0.881027f);
		TEAPOT_VERTEX(0.189375f, 0.310625f, 0.358795f);
		TEAPOT_VERTEX(0.189375f, -0.310625f, 0.358795f);
		TEAPOT_VERTEX(0.200187f, 0.127562f, 0.863037f);
		TEAPOT_VERTEX(0.200187f, -0.127562f, 0.863037f);
		TEAPOT_VERTEX(0.201162f, 0.298838f, 0.764481f);
		TEAPOT_VERTEX(0.201162f, -0.298838f, 0.764481f);
		TEAPOT_VERTEX(0.210938f, 0.0f, 0.884945f);
		TEAPOT_VERTEX(0.219883f, 0.280117f, 0.32156f);
		TEAPOT_VERTEX(0.219883f, -0.280117f, 0.32156f);
		TEAPOT_VERTEX(0.23334f, 0.113457f, 0.884945f);
		TEAPOT_VERTEX(0.23334f, -0.113457f, 0.884945f);
		TEAPOT_VERTEX(0.23375f, 0.26625f, 0.300049f);
		TEAPOT_VERTEX(0.23375f, 0.26625f, 0.863037f);
		TEAPOT_VERTEX(0.23375f, -0.26625f, 0.300049f);
		TEAPOT_VERTEX(0.23375f, -0.26625f, 0.863037f);
		TEAPOT_VERTEX(0.242764f, 0.257238f, 0.881027f);
		TEAPOT_VERTEX(0.242764f, -0.257235f, 0.881027f);
		TEAPOT_VERTEX(0.250945f, 0.249056f, 0.887024f);
		TEAPOT_VERTEX(0.250945f, -0.249054f, 0.887024f);
		TEAPOT_VERTEX(0.2515f, 0.2485f, 0.863037f);
		TEAPOT_VERTEX(0.2515f, -0.2485f, 0.863037f);
		TEAPOT_VERTEX(0.254967f, 0.245034f, 0.881027f);
		TEAPOT_VERTEX(0.254967f, -0.245033f, 0.881027f);
		TEAPOT_VERTEX(0.26925f, 0.23075f, 0.863037f);
		TEAPOT_VERTEX(0.26925f, -0.23075f, 0.863037f);
		TEAPOT_VERTEX(0.29375f, 0.0f, 0.900055f);
		TEAPOT_VERTEX(0.294766f, 0.205234f, 0.884945f);
		TEAPOT_VERTEX(0.294766f, -0.205234f, 0.884945f);
		TEAPOT_VERTEX(0.30375f, 0.46125f, 0.488037f);
		TEAPOT_VERTEX(0.30375f, -0.46125f, 0.488037f);
		TEAPOT_VERTEX(0.307966f, 0.45134f, 0.575333f);
		TEAPOT_VERTEX(0.307966f, -0.45134f, 0.575333f);
		TEAPOT_VERTEX(0.309734f, 0.080953f, 0.900055f);
		TEAPOT_VERTEX(0.309734f, -0.080953f, 0.900055f);
		TEAPOT_VERTEX(0.311416f, 0.443233f, 0.413654f);
		TEAPOT_VERTEX(0.311416f, -0.443233f, 0.413654f);
		TEAPOT_VERTEX(0.319082f, 0.425215f, 0.66803f);
		TEAPOT_VERTEX(0.319082f, -0.425215f, 0.66803f);
		TEAPOT_VERTEX(0.328281f, 0.403594f, 0.358795f);
		TEAPOT_VERTEX(0.328281f, -0.403594f, 0.358795f);
		TEAPOT_VERTEX(0.334797f, 0.388279f, 0.764481f);
		TEAPOT_VERTEX(0.334797f, -0.388279f, 0.764481f);
		TEAPOT_VERTEX(0.345146f, 0.363955f, 0.32156f);
		TEAPOT_VERTEX(0.345146f, -0.363955f, 0.32156f);
		TEAPOT_VERTEX(0.352812f, 0.345937f, 0.300049f);
		TEAPOT_VERTEX(0.352812f, 0.345937f, 0.863037f);
		TEAPOT_VERTEX(0.352812f, -0.345937f, 0.300049f);
		TEAPOT_VERTEX(0.352812f, -0.345937f, 0.863037f);
		TEAPOT_VERTEX(0.353562f, 0.146438f, 0.900055f);
		TEAPOT_VERTEX(0.353562f, -0.146438f, 0.900055f);
		TEAPOT_VERTEX(0.357795f, 0.334229f, 0.881027f);
		TEAPOT_VERTEX(0.357795f, -0.334224f, 0.881027f);
		TEAPOT_VERTEX(0.362318f, 0.323599f, 0.887024f);
		TEAPOT_VERTEX(0.362318f, -0.323595f, 0.887024f);
		TEAPOT_VERTEX(0.362625f, 0.322875f, 0.863037f);
		TEAPOT_VERTEX(0.362625f, -0.322875f, 0.863037f);
		TEAPOT_VERTEX(0.364542f, 0.318373f, 0.881027f);
		TEAPOT_VERTEX(0.364542f, -0.318371f, 0.881027f);
		TEAPOT_VERTEX(0.372437f, 0.299813f, 0.863037f);
		TEAPOT_VERTEX(0.372437f, -0.299813f, 0.863037f);
		TEAPOT_VERTEX(0.385938f, 0.0f, 0.915394f);
		TEAPOT_VERTEX(0.386543f, 0.266661f, 0.884945f);
		TEAPOT_VERTEX(0.386543f, -0.266661f, 0.884945f);
		TEAPOT_VERTEX(0.394777f, 0.0447694f, 0.915394f);
		TEAPOT_VERTEX(0.394777f, -0.0447694f, 0.915394f);
		TEAPOT_VERTEX(0.414844f, 0.0f, 1.03776f);
		TEAPOT_VERTEX(0.41875f, 0.0f, 1.00793f);
		TEAPOT_VERTEX(0.419016f, 0.0809842f, 0.915394f);
		TEAPOT_VERTEX(0.419016f, -0.0809842f, 0.915394f);
		TEAPOT_VERTEX(0.419047f, 0.190266f, 0.900055f);
		TEAPOT_VERTEX(0.419047f, -0.190266f, 0.900055f);
		TEAPOT_VERTEX(0.421414f, 0.0335127f, 1.03776f);
		TEAPOT_VERTEX(0.421414f, -0.0335127f, 1.03776f);
		TEAPOT_VERTEX(0.425021f, 0.0319696f, 1.00793f);
		TEAPOT_VERTEX(0.425021f, -0.0319696f, 1.00793f);
		TEAPOT_VERTEX(0.43946f, 0.0605401f, 1.03776f);
		TEAPOT_VERTEX(0.43946f, -0.0605401f, 1.03776f);
		TEAPOT_VERTEX(0.442242f, 0.0577578f, 1.00793f);
		TEAPOT_VERTEX(0.442242f, -0.0577578f, 1.00793f);
		TEAPOT_VERTEX(0.45f, 0.0f, 0.937988f);
		TEAPOT_VERTEX(0.450781f, 0.0f, 0.971153f);
		TEAPOT_VERTEX(0.453875f, 0.0196248f, 0.937988f);
		TEAPOT_VERTEX(0.453875f, -0.0196248f, 0.937988f);
		TEAPOT_VERTEX(0.454586f, 0.0193479f, 0.971153f);
		TEAPOT_VERTEX(0.454586f, -0.0193479f, 0.971153f);
		TEAPOT_VERTEX(0.45523f, 0.105222f, 0.915394f);
		TEAPOT_VERTEX(0.45523f, -0.105222f, 0.915394f);
		TEAPOT_VERTEX(0.4645f, 0.0354995f, 0.937988f);
		TEAPOT_VERTEX(0.4645f, -0.0354995f, 0.937988f);
		TEAPOT_VERTEX(0.465028f, 0.0349715f, 0.971153f);
		TEAPOT_VERTEX(0.465028f, -0.0349715f, 0.971153f);
		TEAPOT_VERTEX(0.466487f, 0.0785866f, 1.03776f);
		TEAPOT_VERTEX(0.466487f, -0.0785866f, 1.03776f);
		TEAPOT_VERTEX(0.46803f, 0.0749796f, 1.00793f);
		TEAPOT_VERTEX(0.46803f, -0.0749796f, 1.00793f);
		TEAPOT_VERTEX(0.480375f, 0.0461242f, 0.937988f);
		TEAPOT_VERTEX(0.480375f, -0.0461242f, 0.937988f);
		TEAPOT_VERTEX(0.480652f, 0.0454139f, 0.971153f);
		TEAPOT_VERTEX(0.480652f, -0.0454139f, 0.971153f);
		TEAPOT_VERTEX(0.5f, 0.0f, 1.05005f);
		TEAPOT_VERTEX(0.5f, 0.0492185f, 0.971153f);
		TEAPOT_VERTEX(0.5f, 0.049999f, 0.937988f);
		TEAPOT_VERTEX(0.5f, 0.0812503f, 1.00793f);
		TEAPOT_VERTEX(0.5f, 0.0851567f, 1.03776f);
		TEAPOT_VERTEX(0.5f, 0.114062f, 0.915394f);
		TEAPOT_VERTEX(0.5f, 0.20625f, 0.900055f);
		TEAPOT_VERTEX(0.5f, 0.289063f, 0.884945f);
		TEAPOT_VERTEX(0.5f, 0.325001f, 0.863037f);
		TEAPOT_VERTEX(0.5f, 0.34512f, 0.881027f);
		TEAPOT_VERTEX(0.5f, 0.35f, 0.863037f);
		TEAPOT_VERTEX(0.5f, 0.350785f, 0.887024f);
		TEAPOT_VERTEX(0.5f, 0.362308f, 0.881027f);
		TEAPOT_VERTEX(0.5f, 0.375f, 0.300049f);
		TEAPOT_VERTEX(0.5f, 0.375f, 0.863037f);
		TEAPOT_VERTEX(0.5f, 0.394531f, 0.32156f);
		TEAPOT_VERTEX(0.5f, 0.420898f, 0.764481f);
		TEAPOT_VERTEX(0.5f, 0.4375f, 0.358795f);
		TEAPOT_VERTEX(0.5f, 0.460938f, 0.66803f);
		TEAPOT_VERTEX(0.5f, 0.480469f, 0.413654f);
		TEAPOT_VERTEX(0.5f, 0.489258f, 0.575333f);
		TEAPOT_VERTEX(0.5f, 0.5f, 0.488037f);
		TEAPOT_VERTEX(0.5f, -0.0492185f, 0.971153f);
		TEAPOT_VERTEX(0.5f, -0.049999f, 0.937988f);
		TEAPOT_VERTEX(0.5f, -0.0812503f, 1.00793f);
		TEAPOT_VERTEX(0.5f, -0.0851567f, 1.03776f);
		TEAPOT_VERTEX(0.5f, -0.114062f, 0.915394f);
		TEAPOT_VERTEX(0.5f, -0.20625f, 0.900055f);
		TEAPOT_VERTEX(0.5f, -0.289063f, 0.884945f);
		TEAPOT_VERTEX(0.5f, -0.325001f, 0.863037f);
		TEAPOT_VERTEX(0.5f, -0.345118f, 0.881027f);
		TEAPOT_VERTEX(0.5f, -0.35f, 0.863037f);
		TEAPOT_VERTEX(0.5f, -0.35078f, 0.887024f);
		TEAPOT_VERTEX(0.5f, -0.362303f, 0.881027f);
		TEAPOT_VERTEX(0.5f, -0.375f, 0.300049f);
		TEAPOT_VERTEX(0.5f, -0.375f, 0.863037f);
		TEAPOT_VERTEX(0.5f, -0.394531f, 0.32156f);
		TEAPOT_VERTEX(0.5f, -0.420898f, 0.764481f);
		TEAPOT_VERTEX(0.5f, -0.4375f, 0.358795f);
		TEAPOT_VERTEX(0.5f, -0.460938f, 0.66803f);
		TEAPOT_VERTEX(0.5f, -0.480469f, 0.413654f);
		TEAPOT_VERTEX(0.5f, -0.489258f, 0.575333f);
		TEAPOT_VERTEX(0.5f, -0.5f, 0.488037f);
		TEAPOT_VERTEX(0.519348f, 0.0454139f, 0.971153f);
		TEAPOT_VERTEX(0.519348f, -0.0454139f, 0.971153f);
		TEAPOT_VERTEX(0.519625f, 0.0461242f, 0.937988f);
		TEAPOT_VERTEX(0.519625f, -0.0461242f, 0.937988f);
		TEAPOT_VERTEX(0.53197f, 0.0749796f, 1.00793f);
		TEAPOT_VERTEX(0.53197f, -0.0749796f, 1.00793f);
		TEAPOT_VERTEX(0.533513f, 0.0785866f, 1.03776f);
		TEAPOT_VERTEX(0.533513f, -0.0785866f, 1.03776f);
		TEAPOT_VERTEX(0.534972f, 0.0349715f, 0.971153f);
		TEAPOT_VERTEX(0.534972f, -0.0349715f, 0.971153f);
		TEAPOT_VERTEX(0.5355f, 0.0354995f, 0.937988f);
		TEAPOT_VERTEX(0.5355f, -0.0354995f, 0.937988f);
		TEAPOT_VERTEX(0.54477f, 0.105222f, 0.915394f);
		TEAPOT_VERTEX(0.54477f, -0.105222f, 0.915394f);
		TEAPOT_VERTEX(0.545414f, 0.0193479f, 0.971153f);
		TEAPOT_VERTEX(0.545414f, -0.0193479f, 0.971153f);
		TEAPOT_VERTEX(0.546125f, 0.0196248f, 0.937988f);
		TEAPOT_VERTEX(0.546125f, -0.0196248f, 0.937988f);
		TEAPOT_VERTEX(0.549219f, 0.0f, 0.971153f);
		TEAPOT_VERTEX(0.55f, 0.0f, 0.937988f);
		TEAPOT_VERTEX(0.557758f, 0.0577578f, 1.00793f);
		TEAPOT_VERTEX(0.557758f, -0.0577578f, 1.00793f);
		TEAPOT_VERTEX(0.56054f, 0.0605401f, 1.03776f);
		TEAPOT_VERTEX(0.56054f, -0.0605401f, 1.03776f);
		TEAPOT_VERTEX(0.574979f, 0.0319696f, 1.00793f);
		TEAPOT_VERTEX(0.574979f, -0.0319696f, 1.00793f);
		TEAPOT_VERTEX(0.578586f, 0.0335127f, 1.03776f);
		TEAPOT_VERTEX(0.578586f, -0.0335127f, 1.03776f);
		TEAPOT_VERTEX(0.580953f, 0.190266f, 0.900055f);
		TEAPOT_VERTEX(0.580953f, -0.190266f, 0.900055f);
		TEAPOT_VERTEX(0.580984f, 0.0809842f, 0.915394f);
		TEAPOT_VERTEX(0.580984f, -0.0809842f, 0.915394f);
		TEAPOT_VERTEX(0.58125f, 0.0f, 1.00793f);
		TEAPOT_VERTEX(0.585156f, 0.0f, 1.03776f);
		TEAPOT_VERTEX(0.605223f, 0.0447694f, 0.915394f);
		TEAPOT_VERTEX(0.605223f, -0.0447694f, 0.915394f);
		TEAPOT_VERTEX(0.613457f, 0.266661f, 0.884945f);
		TEAPOT_VERTEX(0.613457f, -0.266661f, 0.884945f);
		TEAPOT_VERTEX(0.614062f, 0.0f, 0.915394f);
		TEAPOT_VERTEX(0.627562f, 0.299813f, 0.863037f);
		TEAPOT_VERTEX(0.627562f, -0.299813f, 0.863037f);
		TEAPOT_VERTEX(0.635459f, 0.318373f, 0.881027f);
		TEAPOT_VERTEX(0.635459f, -0.318371f, 0.881027f);
		TEAPOT_VERTEX(0.637375f, 0.322875f, 0.863037f);
		TEAPOT_VERTEX(0.637375f, -0.322875f, 0.863037f);
		TEAPOT_VERTEX(0.637682f, 0.323599f, 0.887024f);
		TEAPOT_VERTEX(0.637682f, -0.323595f, 0.887024f);
		TEAPOT_VERTEX(0.642205f, 0.334229f, 0.881027f);
		TEAPOT_VERTEX(0.642205f, -0.334224f, 0.881027f);
		TEAPOT_VERTEX(0.646437f, 0.146438f, 0.900055f);
		TEAPOT_VERTEX(0.646437f, -0.146438f, 0.900055f);
		TEAPOT_VERTEX(0.647187f, 0.345937f, 0.300049f);
		TEAPOT_VERTEX(0.647187f, 0.345937f, 0.863037f);
		TEAPOT_VERTEX(0.647187f, -0.345937f, 0.300049f);
		TEAPOT_VERTEX(0.647187f, -0.345937f, 0.863037f);
		TEAPOT_VERTEX(0.654853f, 0.363955f, 0.32156f);
		TEAPOT_VERTEX(0.654853f, -0.363955f, 0.32156f);
		TEAPOT_VERTEX(0.665203f, 0.388279f, 0.764481f);
		TEAPOT_VERTEX(0.665203f, -0.388279f, 0.764481f);
		TEAPOT_VERTEX(0.671719f, 0.403594f, 0.358795f);
		TEAPOT_VERTEX(0.671719f, -0.403594f, 0.358795f);
		TEAPOT_VERTEX(0.680918f, 0.425215f, 0.66803f);
		TEAPOT_VERTEX(0.680918f, -0.425215f, 0.66803f);
		TEAPOT_VERTEX(0.688584f, 0.443233f, 0.413654f);
		TEAPOT_VERTEX(0.688584f, -0.443233f, 0.413654f);
		TEAPOT_VERTEX(0.690266f, 0.080953f, 0.900055f);
		TEAPOT_VERTEX(0.690266f, -0.080953f, 0.900055f);
		TEAPOT_VERTEX(0.692034f, 0.45134f, 0.575333f);
		TEAPOT_VERTEX(0.692034f, -0.45134f, 0.575333f);
		TEAPOT_VERTEX(0.69625f, 0.46125f, 0.488037f);
		TEAPOT_VERTEX(0.69625f, -0.46125f, 0.488037f);
		TEAPOT_VERTEX(0.705234f, 0.205234f, 0.884945f);
		TEAPOT_VERTEX(0.705234f, -0.205234f, 0.884945f);
		TEAPOT_VERTEX(0.70625f, 0.0f, 0.900055f);
		TEAPOT_VERTEX(0.73075f, 0.23075f, 0.863037f);
		TEAPOT_VERTEX(0.73075f, -0.23075f, 0.863037f);
		TEAPOT_VERTEX(0.745033f, 0.245034f, 0.881027f);
		TEAPOT_VERTEX(0.745033f, -0.245033f, 0.881027f);
		TEAPOT_VERTEX(0.7485f, 0.2485f, 0.863037f);
		TEAPOT_VERTEX(0.7485f, -0.2485f, 0.863037f);
		TEAPOT_VERTEX(0.749055f, 0.249056f, 0.887024f);
		TEAPOT_VERTEX(0.749055f, -0.249054f, 0.887024f);
		TEAPOT_VERTEX(0.757236f, 0.257238f, 0.881027f);
		TEAPOT_VERTEX(0.757236f, -0.257235f, 0.881027f);
		TEAPOT_VERTEX(0.76625f, 0.26625f, 0.300049f);
		TEAPOT_VERTEX(0.76625f, 0.26625f, 0.863037f);
		TEAPOT_VERTEX(0.76625f, -0.26625f, 0.300049f);
		TEAPOT_VERTEX(0.76625f, -0.26625f, 0.863037f);
		TEAPOT_VERTEX(0.76666f, 0.113457f, 0.884945f);
		TEAPOT_VERTEX(0.76666f, -0.113457f, 0.884945f);
		TEAPOT_VERTEX(0.780117f, 0.280117f, 0.32156f);
		TEAPOT_VERTEX(0.780117f, -0.280117f, 0.32156f);
		TEAPOT_VERTEX(0.789062f, 0.0f, 0.884945f);
		TEAPOT_VERTEX(0.798838f, 0.298838f, 0.764481f);
		TEAPOT_VERTEX(0.798838f, -0.298838f, 0.764481f);
		TEAPOT_VERTEX(0.799812f, 0.127562f, 0.863037f);
		TEAPOT_VERTEX(0.799812f, -0.127562f, 0.863037f);
		TEAPOT_VERTEX(0.810625f, 0.310625f, 0.358795f);
		TEAPOT_VERTEX(0.810625f, -0.310625f, 0.358795f);
		TEAPOT_VERTEX(0.818371f, 0.135459f, 0.881027f);
		TEAPOT_VERTEX(0.818371f, -0.135458f, 0.881027f);
		TEAPOT_VERTEX(0.822875f, 0.137375f, 0.863037f);
		TEAPOT_VERTEX(0.822875f, -0.137375f, 0.863037f);
		TEAPOT_VERTEX(0.823596f, 0.137682f, 0.887024f);
		TEAPOT_VERTEX(0.823596f, -0.137681f, 0.887024f);
		TEAPOT_VERTEX(0.825f, 0.0f, 0.863037f);
		TEAPOT_VERTEX(0.827266f, 0.327266f, 0.66803f);
		TEAPOT_VERTEX(0.827266f, -0.327266f, 0.66803f);
		TEAPOT_VERTEX(0.834226f, 0.142205f, 0.881027f);
		TEAPOT_VERTEX(0.834226f, -0.142204f, 0.881027f);
		TEAPOT_VERTEX(0.841133f, 0.341133f, 0.413654f);
		TEAPOT_VERTEX(0.841133f, -0.341133f, 0.413654f);
		TEAPOT_VERTEX(0.845117f, 0.0f, 0.881027f);
		TEAPOT_VERTEX(0.845937f, 0.147187f, 0.300049f);
		TEAPOT_VERTEX(0.845937f, 0.147187f, 0.863037f);
		TEAPOT_VERTEX(0.845937f, -0.147187f, 0.300049f);
		TEAPOT_VERTEX(0.845937f, -0.147187f, 0.863037f);
		TEAPOT_VERTEX(0.847373f, 0.347373f, 0.575333f);
		TEAPOT_VERTEX(0.847373f, -0.347373f, 0.575333f);
		TEAPOT_VERTEX(0.85f, 0.0f, 0.863037f);
		TEAPOT_VERTEX(0.850781f, 0.0f, 0.887024f);
		TEAPOT_VERTEX(0.855f, 0.355f, 0.488037f);
		TEAPOT_VERTEX(0.855f, -0.355f, 0.488037f);
		TEAPOT_VERTEX(0.862305f, 0.0f, 0.881027f);
		TEAPOT_VERTEX(0.863955f, 0.154853f, 0.32156f);
		TEAPOT_VERTEX(0.863955f, -0.154853f, 0.32156f);
		TEAPOT_VERTEX(0.875f, 0.0f, 0.300049f);
		TEAPOT_VERTEX(0.875f, 0.0f, 0.863037f);
		TEAPOT_VERTEX(0.888279f, 0.165203f, 0.764481f);
		TEAPOT_VERTEX(0.888279f, -0.165203f, 0.764481f);
		TEAPOT_VERTEX(0.894531f, 0.0f, 0.32156f);
		TEAPOT_VERTEX(0.903594f, 0.171719f, 0.358795f);
		TEAPOT_VERTEX(0.903594f, -0.171719f, 0.358795f);
		TEAPOT_VERTEX(0.920898f, 0.0f, 0.764481f);
		TEAPOT_VERTEX(0.925f, 0.0f, 0.413086f);
		TEAPOT_VERTEX(0.925f, 0.0f, 0.618896f);
		TEAPOT_VERTEX(0.925f, 0.0928131f, 0.445244f);
		TEAPOT_VERTEX(0.925f, 0.0928131f, 0.586738f);
		TEAPOT_VERTEX(0.925f, 0.123751f, 0.515991f);
		TEAPOT_VERTEX(0.925f, -0.0928131f, 0.445244f);
		TEAPOT_VERTEX(0.925f, -0.0928131f, 0.586738f);
		TEAPOT_VERTEX(0.925f, -0.123751f, 0.515991f);
		TEAPOT_VERTEX(0.925215f, 0.180918f, 0.66803f);
		TEAPOT_VERTEX(0.925215f, -0.180918f, 0.66803f);
		TEAPOT_VERTEX(0.9375f, 0.0f, 0.358795f);
		TEAPOT_VERTEX(0.943232f, 0.188584f, 0.413654f);
		TEAPOT_VERTEX(0.943232f, -0.188584f, 0.413654f);
		TEAPOT_VERTEX(0.95134f, 0.192034f, 0.575333f);
		TEAPOT_VERTEX(0.95134f, -0.192034f, 0.575333f);
		TEAPOT_VERTEX(0.960938f, 0.0f, 0.66803f);
		TEAPOT_VERTEX(0.96125f, 0.19625f, 0.488037f);
		TEAPOT_VERTEX(0.96125f, -0.19625f, 0.488037f);
		TEAPOT_VERTEX(0.980469f, 0.0f, 0.413654f);
		TEAPOT_VERTEX(0.989258f, 0.0f, 0.575333f);
		TEAPOT_VERTEX(1.0f, 0.0f, 0.488037f);
		TEAPOT_VERTEX(1.04492f, 0.0f, 0.646503f);
		TEAPOT_VERTEX(1.05408f, 0.0838042f, 0.622637f);
		TEAPOT_VERTEX(1.05408f, -0.0838042f, 0.622637f);
		TEAPOT_VERTEX(1.07422f, 0.111739f, 0.570131f);
		TEAPOT_VERTEX(1.07422f, -0.111739f, 0.570131f);
		TEAPOT_VERTEX(1.09436f, 0.0838042f, 0.517625f);
		TEAPOT_VERTEX(1.09436f, -0.0838042f, 0.517625f);
		TEAPOT_VERTEX(1.09687f, 0.0f, 0.71286f);
		TEAPOT_VERTEX(1.10352f, 0.0f, 0.493759f);
		TEAPOT_VERTEX(1.10859f, 0.0639847f, 0.698941f);
		TEAPOT_VERTEX(1.10859f, -0.0639847f, 0.698941f);
		TEAPOT_VERTEX(1.12539f, 0.0f, 0.79327f);
		TEAPOT_VERTEX(1.13437f, 0.0853129f, 0.66832f);
		TEAPOT_VERTEX(1.13437f, -0.0853129f, 0.66832f);
		TEAPOT_VERTEX(1.13967f, 0.0441651f, 0.788218f);
		TEAPOT_VERTEX(1.13967f, -0.0441651f, 0.788218f);
		TEAPOT_VERTEX(1.16016f, 0.0639847f, 0.637698f);
		TEAPOT_VERTEX(1.16016f, -0.0639847f, 0.637698f);
		TEAPOT_VERTEX(1.17109f, 0.0588868f, 0.777105f);
		TEAPOT_VERTEX(1.17109f, -0.0588868f, 0.777105f);
		TEAPOT_VERTEX(1.17188f, 0.0f, 0.623779f);
		TEAPOT_VERTEX(1.175f, 0.0f, 0.863037f);
		TEAPOT_VERTEX(1.19297f, 0.0f, 0.8732f);
		TEAPOT_VERTEX(1.19844f, 0.0351562f, 0.863037f);
		TEAPOT_VERTEX(1.19844f, -0.0351562f, 0.863037f);
		TEAPOT_VERTEX(1.2f, 0.0f, 0.863037f);
		TEAPOT_VERTEX(1.20251f, 0.0441651f, 0.765992f);
		TEAPOT_VERTEX(1.20251f, -0.0441651f, 0.765992f);
		TEAPOT_VERTEX(1.20625f, 0.0f, 0.876587f);
		TEAPOT_VERTEX(1.21016f, 0.0f, 0.8732f);
		TEAPOT_VERTEX(1.21563f, 0.0210938f, 0.863037f);
		TEAPOT_VERTEX(1.21563f, -0.0210938f, 0.863037f);
		TEAPOT_VERTEX(1.2168f, 0.0f, 0.76094f);
		TEAPOT_VERTEX(1.21807f, 0.032959f, 0.873741f);
		TEAPOT_VERTEX(1.21807f, -0.032959f, 0.873741f);
		TEAPOT_VERTEX(1.22981f, 0.028125f, 0.87746f);
		TEAPOT_VERTEX(1.22981f, -0.028125f, 0.87746f);
		TEAPOT_VERTEX(1.23016f, 0.023291f, 0.873967f);
		TEAPOT_VERTEX(1.23016f, -0.023291f, 0.873967f);
		TEAPOT_VERTEX(1.25f, 0.028125f, 0.863037f);
		TEAPOT_VERTEX(1.25f, 0.046875f, 0.863037f);
		TEAPOT_VERTEX(1.25f, -0.028125f, 0.863037f);
		TEAPOT_VERTEX(1.25f, -0.046875f, 0.863037f);
		TEAPOT_VERTEX(1.27329f, 0.0439453f, 0.874933f);
		TEAPOT_VERTEX(1.27329f, -0.0439453f, 0.874933f);
		TEAPOT_VERTEX(1.27417f, 0.0310547f, 0.875654f);
		TEAPOT_VERTEX(1.27417f, -0.0310547f, 0.875654f);
		TEAPOT_VERTEX(1.28164f, 0.0375f, 0.879379f);
		TEAPOT_VERTEX(1.28164f, -0.0375f, 0.879379f);
		TEAPOT_VERTEX(1.28437f, 0.0210938f, 0.863037f);
		TEAPOT_VERTEX(1.28437f, -0.0210938f, 0.863037f);
		TEAPOT_VERTEX(1.3f, 0.0f, 0.863037f);
		TEAPOT_VERTEX(1.30156f, 0.0351562f, 0.863037f);
		TEAPOT_VERTEX(1.30156f, -0.0351562f, 0.863037f);
		TEAPOT_VERTEX(1.31818f, 0.023291f, 0.877342f);
		TEAPOT_VERTEX(1.31818f, -0.023291f, 0.877342f);
		TEAPOT_VERTEX(1.325f, 0.0f, 0.863037f);
		TEAPOT_VERTEX(1.32851f, 0.032959f, 0.876125f);
		TEAPOT_VERTEX(1.32851f, -0.032959f, 0.876125f);
		TEAPOT_VERTEX(1.33347f, 0.028125f, 0.881299f);
		TEAPOT_VERTEX(1.33347f, -0.028125f, 0.881299f);
		TEAPOT_VERTEX(1.33818f, 0.0f, 0.878109f);
		TEAPOT_VERTEX(1.35361f, 0.0f, 0.876667f);
		TEAPOT_VERTEX(1.35703f, 0.0f, 0.882171f);
		TEAPOT_VERTEX(-0.0167969f, 0.0f, 0.768166f);
		TEAPOT_VERTEX(-0.0202759f, 0.0421881f, 0.776765f);
		TEAPOT_VERTEX(-0.0202759f, -0.0421881f, 0.776765f);
		TEAPOT_VERTEX(-0.0279297f, 0.0562508f, 0.795683f);
		TEAPOT_VERTEX(-0.0279297f, -0.0562508f, 0.795683f);
		TEAPOT_VERTEX(-0.0355835f, 0.0421881f, 0.814601f);
		TEAPOT_VERTEX(-0.0355835f, -0.0421881f, 0.814601f);
		TEAPOT_VERTEX(-0.0390625f, 0.0f, 0.8232f);
		TEAPOT_VERTEX(-0.0800781f, 0.0f, 0.538757f);
		TEAPOT_VERTEX(-0.0827332f, 0.0421881f, 0.529498f);
		TEAPOT_VERTEX(-0.0827332f, -0.0421881f, 0.529498f);
		TEAPOT_VERTEX(-0.0885742f, 0.0562508f, 0.509128f);
		TEAPOT_VERTEX(-0.0885742f, -0.0562508f, 0.509128f);
		TEAPOT_VERTEX(-0.0944153f, 0.0421881f, 0.488759f);
		TEAPOT_VERTEX(-0.0944153f, -0.0421881f, 0.488759f);
		TEAPOT_VERTEX(-0.0970703f, 0.0f, 0.4795f);
		TEAPOT_VERTEX(-0.103125f, 0.0f, 0.762024f);
		TEAPOT_VERTEX(-0.111426f, 0.0421881f, 0.769668f);
		TEAPOT_VERTEX(-0.111426f, -0.0421881f, 0.769668f);
		TEAPOT_VERTEX(-0.129688f, 0.0562508f, 0.786484f);
		TEAPOT_VERTEX(-0.129688f, -0.0562508f, 0.786484f);
		TEAPOT_VERTEX(-0.134375f, 0.0f, 0.600098f);
		TEAPOT_VERTEX(-0.141943f, 0.0421881f, 0.592611f);
		TEAPOT_VERTEX(-0.141943f, -0.0421881f, 0.592611f);
		TEAPOT_VERTEX(-0.147949f, 0.0421881f, 0.8033f);
		TEAPOT_VERTEX(-0.147949f, -0.0421881f, 0.8033f);
		TEAPOT_VERTEX(-0.15625f, 0.0f, 0.810943f);
		TEAPOT_VERTEX(-0.156641f, 0.0f, 0.745354f);
		TEAPOT_VERTEX(-0.158594f, 0.0562508f, 0.576141f);
		TEAPOT_VERTEX(-0.158594f, -0.0562508f, 0.576141f);
		TEAPOT_VERTEX(-0.165234f, 0.0f, 0.661621f);
		TEAPOT_VERTEX(-0.167566f, 0.0421881f, 0.750404f);
		TEAPOT_VERTEX(-0.167566f, -0.0421881f, 0.750404f);
		TEAPOT_VERTEX(-0.175f, 0.0f, 0.712891f);
		TEAPOT_VERTEX(-0.175244f, 0.0421881f, 0.559671f);
		TEAPOT_VERTEX(-0.175244f, -0.0421881f, 0.559671f);
		TEAPOT_VERTEX(-0.175885f, 0.0421881f, 0.656723f);
		TEAPOT_VERTEX(-0.175885f, -0.0421881f, 0.656723f);
		TEAPOT_VERTEX(-0.182812f, 0.0f, 0.552185f);
		TEAPOT_VERTEX(-0.186719f, 0.0421881f, 0.712891f);
		TEAPOT_VERTEX(-0.186719f, -0.0421881f, 0.712891f);
		TEAPOT_VERTEX(-0.191602f, 0.0562508f, 0.761515f);
		TEAPOT_VERTEX(-0.191602f, -0.0562508f, 0.761515f);
		TEAPOT_VERTEX(-0.199316f, 0.0562508f, 0.645947f);
		TEAPOT_VERTEX(-0.199316f, -0.0562508f, 0.645947f);
		TEAPOT_VERTEX(-0.2125f, 0.0562508f, 0.712891f);
		TEAPOT_VERTEX(-0.2125f, -0.0562508f, 0.712891f);
		TEAPOT_VERTEX(-0.215637f, 0.0421881f, 0.772625f);
		TEAPOT_VERTEX(-0.215637f, -0.0421881f, 0.772625f);
		TEAPOT_VERTEX(-0.222748f, 0.0421881f, 0.63517f);
		TEAPOT_VERTEX(-0.222748f, -0.0421881f, 0.63517f);
		TEAPOT_VERTEX(-0.226562f, 0.0f, 0.777676f);
		TEAPOT_VERTEX(-0.233398f, 0.0f, 0.630272f);
		TEAPOT_VERTEX(-0.238281f, 0.0421881f, 0.712891f);
		TEAPOT_VERTEX(-0.238281f, -0.0421881f, 0.712891f);
		TEAPOT_VERTEX(-0.25f, 0.0f, 0.712891f);
	}
#define TEAPOT_FACE(size, ...) { \
	std::vector<int> facePoints = { __VA_ARGS__ }; \
	std::tuple<int, std::vector<int>> face = std::make_tuple( size, facePoints ); \
	faces.push_back(face); }
	{
	TEAPOT_FACE(4, 324, 306, 304, 317);
	TEAPOT_FACE(4, 306, 283, 281, 304);
	TEAPOT_FACE(4, 283, 248, 246, 281);
	TEAPOT_FACE(4, 248, 172, 171, 246);
	TEAPOT_FACE(4, 317, 304, 308, 325);
	TEAPOT_FACE(4, 304, 281, 285, 308);
	TEAPOT_FACE(4, 281, 246, 250, 285);
	TEAPOT_FACE(4, 246, 171, 173, 250);
	TEAPOT_FACE(4, 325, 308, 313, 328);
	TEAPOT_FACE(4, 308, 285, 287, 313);
	TEAPOT_FACE(4, 285, 250, 252, 287);
	TEAPOT_FACE(4, 250, 173, 174, 252);
	TEAPOT_FACE(4, 328, 313, 319, 332);
	TEAPOT_FACE(4, 313, 287, 290, 319);
	TEAPOT_FACE(4, 287, 252, 257, 290);
	TEAPOT_FACE(4, 252, 174, 176, 257);
	TEAPOT_FACE(4, 172, 117, 119, 171);
	TEAPOT_FACE(4, 117, 82, 84, 119);
	TEAPOT_FACE(4, 82, 59, 61, 84);
	TEAPOT_FACE(4, 59, 42, 49, 61);
	TEAPOT_FACE(4, 171, 119, 115, 173);
	TEAPOT_FACE(4, 119, 84, 80, 115);
	TEAPOT_FACE(4, 84, 61, 57, 80);
	TEAPOT_FACE(4, 61, 49, 41, 57);
	TEAPOT_FACE(4, 173, 115, 113, 174);
	TEAPOT_FACE(4, 115, 80, 78, 113);
	TEAPOT_FACE(4, 80, 57, 52, 78);
	TEAPOT_FACE(4, 57, 41, 38, 52);
	TEAPOT_FACE(4, 174, 113, 108, 176);
	TEAPOT_FACE(4, 113, 78, 75, 108);
	TEAPOT_FACE(4, 78, 52, 46, 75);
	TEAPOT_FACE(4, 52, 38, 35, 46);
	TEAPOT_FACE(4, 42, 60, 62, 49);
	TEAPOT_FACE(4, 60, 83, 85, 62);
	TEAPOT_FACE(4, 83, 118, 120, 85);
	TEAPOT_FACE(4, 118, 193, 192, 120);
	TEAPOT_FACE(4, 49, 62, 58, 41);
	TEAPOT_FACE(4, 62, 85, 81, 58);
	TEAPOT_FACE(4, 85, 120, 116, 81);
	TEAPOT_FACE(4, 120, 192, 194, 116);
	TEAPOT_FACE(4, 41, 58, 53, 38);
	TEAPOT_FACE(4, 58, 81, 79, 53);
	TEAPOT_FACE(4, 81, 116, 114, 79);
	TEAPOT_FACE(4, 116, 194, 195, 114);
	TEAPOT_FACE(4, 38, 53, 48, 35);
	TEAPOT_FACE(4, 53, 79, 77, 48);
	TEAPOT_FACE(4, 79, 114, 110, 77);
	TEAPOT_FACE(4, 114, 195, 197, 110);
	TEAPOT_FACE(4, 193, 249, 247, 192);
	TEAPOT_FACE(4, 249, 284, 282, 247);
	TEAPOT_FACE(4, 284, 307, 305, 282);
	TEAPOT_FACE(4, 307, 324, 317, 305);
	TEAPOT_FACE(4, 192, 247, 251, 194);
	TEAPOT_FACE(4, 247, 282, 286, 251);
	TEAPOT_FACE(4, 282, 305, 309, 286);
	TEAPOT_FACE(4, 305, 317, 325, 309);
	TEAPOT_FACE(4, 194, 251, 253, 195);
	TEAPOT_FACE(4, 251, 286, 288, 253);
	TEAPOT_FACE(4, 286, 309, 314, 288);
	TEAPOT_FACE(4, 309, 325, 328, 314);
	TEAPOT_FACE(4, 195, 253, 259, 197);
	TEAPOT_FACE(4, 253, 288, 292, 259);
	TEAPOT_FACE(4, 288, 314, 321, 292);
	TEAPOT_FACE(4, 314, 328, 332, 321);
	TEAPOT_FACE(4, 332, 319, 333, 338);
	TEAPOT_FACE(4, 319, 290, 298, 333);
	TEAPOT_FACE(4, 290, 257, 262, 298);
	TEAPOT_FACE(4, 257, 176, 178, 262);
	TEAPOT_FACE(4, 338, 333, 347, 354);
	TEAPOT_FACE(4, 333, 298, 311, 347);
	TEAPOT_FACE(4, 298, 262, 266, 311);
	TEAPOT_FACE(4, 262, 178, 180, 266);
	TEAPOT_FACE(4, 354, 347, 352, 358);
	TEAPOT_FACE(4, 347, 311, 322, 352);
	TEAPOT_FACE(4, 311, 266, 272, 322);
	TEAPOT_FACE(4, 266, 180, 182, 272);
	TEAPOT_FACE(4, 358, 352, 355, 359);
	TEAPOT_FACE(4, 352, 322, 326, 355);
	TEAPOT_FACE(4, 322, 272, 274, 326);
	TEAPOT_FACE(4, 272, 182, 183, 274);
	TEAPOT_FACE(4, 176, 108, 103, 178);
	TEAPOT_FACE(4, 108, 75, 67, 103);
	TEAPOT_FACE(4, 75, 46, 27, 67);
	TEAPOT_FACE(4, 46, 35, 20, 27);
	TEAPOT_FACE(4, 178, 103, 99, 180);
	TEAPOT_FACE(4, 103, 67, 54, 99);
	TEAPOT_FACE(4, 67, 27, 18, 54);
	TEAPOT_FACE(4, 27, 20, 12, 18);
	TEAPOT_FACE(4, 180, 99, 93, 182);
	TEAPOT_FACE(4, 99, 54, 43, 93);
	TEAPOT_FACE(4, 54, 18, 13, 43);
	TEAPOT_FACE(4, 18, 12, 3, 13);
	TEAPOT_FACE(4, 182, 93, 91, 183);
	TEAPOT_FACE(4, 93, 43, 39, 91);
	TEAPOT_FACE(4, 43, 13, 10, 39);
	TEAPOT_FACE(4, 13, 3, 0, 10);
	TEAPOT_FACE(4, 35, 48, 28, 20);
	TEAPOT_FACE(4, 48, 77, 68, 28);
	TEAPOT_FACE(4, 77, 110, 104, 68);
	TEAPOT_FACE(4, 110, 197, 199, 104);
	TEAPOT_FACE(4, 20, 28, 19, 12);
	TEAPOT_FACE(4, 28, 68, 55, 19);
	TEAPOT_FACE(4, 68, 104, 100, 55);
	TEAPOT_FACE(4, 104, 199, 201, 100);
	TEAPOT_FACE(4, 12, 19, 14, 3);
	TEAPOT_FACE(4, 19, 55, 44, 14);
	TEAPOT_FACE(4, 55, 100, 94, 44);
	TEAPOT_FACE(4, 100, 201, 203, 94);
	TEAPOT_FACE(4, 3, 14, 11, 0);
	TEAPOT_FACE(4, 14, 44, 40, 11);
	TEAPOT_FACE(4, 44, 94, 92, 40);
	TEAPOT_FACE(4, 94, 203, 204, 92);
	TEAPOT_FACE(4, 197, 259, 263, 199);
	TEAPOT_FACE(4, 259, 292, 299, 263);
	TEAPOT_FACE(4, 292, 321, 334, 299);
	TEAPOT_FACE(4, 321, 332, 338, 334);
	TEAPOT_FACE(4, 199, 263, 267, 201);
	TEAPOT_FACE(4, 263, 299, 312, 267);
	TEAPOT_FACE(4, 299, 334, 348, 312);
	TEAPOT_FACE(4, 334, 338, 354, 348);
	TEAPOT_FACE(4, 201, 267, 273, 203);
	TEAPOT_FACE(4, 267, 312, 323, 273);
	TEAPOT_FACE(4, 312, 348, 353, 323);
	TEAPOT_FACE(4, 348, 354, 358, 353);
	TEAPOT_FACE(4, 203, 273, 275, 204);
	TEAPOT_FACE(4, 273, 323, 327, 275);
	TEAPOT_FACE(4, 323, 353, 356, 327);
	TEAPOT_FACE(4, 353, 358, 359, 356);
	TEAPOT_FACE(4, 359, 355, 350, 357);
	TEAPOT_FACE(4, 355, 326, 315, 350);
	TEAPOT_FACE(4, 326, 274, 268, 315);
	TEAPOT_FACE(4, 274, 183, 181, 268);
	TEAPOT_FACE(4, 357, 350, 336, 349);
	TEAPOT_FACE(4, 350, 315, 302, 336);
	TEAPOT_FACE(4, 315, 268, 264, 302);
	TEAPOT_FACE(4, 268, 181, 179, 264);
	TEAPOT_FACE(4, 349, 336, 329, 335);
	TEAPOT_FACE(4, 336, 302, 295, 329);
	TEAPOT_FACE(4, 302, 264, 260, 295);
	TEAPOT_FACE(4, 264, 179, 177, 260);
	TEAPOT_FACE(4, 335, 329, 318, 331);
	TEAPOT_FACE(4, 329, 295, 289, 318);
	TEAPOT_FACE(4, 295, 260, 256, 289);
	TEAPOT_FACE(4, 260, 177, 175, 256);
	TEAPOT_FACE(4, 183, 91, 97, 181);
	TEAPOT_FACE(4, 91, 39, 50, 97);
	TEAPOT_FACE(4, 39, 10, 15, 50);
	TEAPOT_FACE(4, 10, 0, 6, 15);
	TEAPOT_FACE(4, 181, 97, 101, 179);
	TEAPOT_FACE(4, 97, 50, 63, 101);
	TEAPOT_FACE(4, 50, 15, 21, 63);
	TEAPOT_FACE(4, 15, 6, 17, 21);
	TEAPOT_FACE(4, 179, 101, 105, 177);
	TEAPOT_FACE(4, 101, 63, 70, 105);
	TEAPOT_FACE(4, 63, 21, 36, 70);
	TEAPOT_FACE(4, 21, 17, 26, 36);
	TEAPOT_FACE(4, 177, 105, 107, 175);
	TEAPOT_FACE(4, 105, 70, 74, 107);
	TEAPOT_FACE(4, 70, 36, 45, 74);
	TEAPOT_FACE(4, 36, 26, 33, 45);
	TEAPOT_FACE(4, 0, 11, 16, 6);
	TEAPOT_FACE(4, 11, 40, 51, 16);
	TEAPOT_FACE(4, 40, 92, 98, 51);
	TEAPOT_FACE(4, 92, 204, 202, 98);
	TEAPOT_FACE(4, 6, 16, 22, 17);
	TEAPOT_FACE(4, 16, 51, 64, 22);
	TEAPOT_FACE(4, 51, 98, 102, 64);
	TEAPOT_FACE(4, 98, 202, 200, 102);
	TEAPOT_FACE(4, 17, 22, 37, 26);
	TEAPOT_FACE(4, 22, 64, 71, 37);
	TEAPOT_FACE(4, 64, 102, 106, 71);
	TEAPOT_FACE(4, 102, 200, 198, 106);
	TEAPOT_FACE(4, 26, 37, 47, 33);
	TEAPOT_FACE(4, 37, 71, 76, 47);
	TEAPOT_FACE(4, 71, 106, 109, 76);
	TEAPOT_FACE(4, 106, 198, 196, 109);
	TEAPOT_FACE(4, 204, 275, 269, 202);
	TEAPOT_FACE(4, 275, 327, 316, 269);
	TEAPOT_FACE(4, 327, 356, 351, 316);
	TEAPOT_FACE(4, 356, 359, 357, 351);
	TEAPOT_FACE(4, 202, 269, 265, 200);
	TEAPOT_FACE(4, 269, 316, 303, 265);
	TEAPOT_FACE(4, 316, 351, 337, 303);
	TEAPOT_FACE(4, 351, 357, 349, 337);
	TEAPOT_FACE(4, 200, 265, 261, 198);
	TEAPOT_FACE(4, 265, 303, 296, 261);
	TEAPOT_FACE(4, 303, 337, 330, 296);
	TEAPOT_FACE(4, 337, 349, 335, 330);
	TEAPOT_FACE(4, 198, 261, 258, 196);
	TEAPOT_FACE(4, 261, 296, 291, 258);
	TEAPOT_FACE(4, 296, 330, 320, 291);
	TEAPOT_FACE(4, 330, 335, 331, 320);
	TEAPOT_FACE(4, 23, 24, 425, 424);
	TEAPOT_FACE(4, 24, 29, 427, 425);
	TEAPOT_FACE(4, 29, 31, 429, 427);
	TEAPOT_FACE(4, 31, 34, 431, 429);
	TEAPOT_FACE(4, 424, 425, 441, 440);
	TEAPOT_FACE(4, 425, 427, 443, 441);
	TEAPOT_FACE(4, 427, 429, 448, 443);
	TEAPOT_FACE(4, 429, 431, 450, 448);
	TEAPOT_FACE(4, 440, 441, 455, 451);
	TEAPOT_FACE(4, 441, 443, 465, 455);
	TEAPOT_FACE(4, 443, 448, 471, 465);
	TEAPOT_FACE(4, 448, 450, 475, 471);
	TEAPOT_FACE(4, 451, 455, 463, 457);
	TEAPOT_FACE(4, 455, 465, 469, 463);
	TEAPOT_FACE(4, 465, 471, 477, 469);
	TEAPOT_FACE(4, 471, 475, 479, 477);
	TEAPOT_FACE(4, 34, 32, 430, 431);
	TEAPOT_FACE(4, 32, 30, 428, 430);
	TEAPOT_FACE(4, 30, 25, 426, 428);
	TEAPOT_FACE(4, 25, 23, 424, 426);
	TEAPOT_FACE(4, 431, 430, 449, 450);
	TEAPOT_FACE(4, 430, 428, 444, 449);
	TEAPOT_FACE(4, 428, 426, 442, 444);
	TEAPOT_FACE(4, 426, 424, 440, 442);
	TEAPOT_FACE(4, 450, 449, 472, 475);
	TEAPOT_FACE(4, 449, 444, 466, 472);
	TEAPOT_FACE(4, 444, 442, 456, 466);
	TEAPOT_FACE(4, 442, 440, 451, 456);
	TEAPOT_FACE(4, 475, 472, 478, 479);
	TEAPOT_FACE(4, 472, 466, 470, 478);
	TEAPOT_FACE(4, 466, 456, 464, 470);
	TEAPOT_FACE(4, 456, 451, 457, 464);
	TEAPOT_FACE(4, 457, 463, 460, 454);
	TEAPOT_FACE(4, 463, 469, 467, 460);
	TEAPOT_FACE(4, 469, 477, 473, 467);
	TEAPOT_FACE(4, 477, 479, 476, 473);
	TEAPOT_FACE(4, 454, 460, 446, 445);
	TEAPOT_FACE(4, 460, 467, 452, 446);
	TEAPOT_FACE(4, 467, 473, 458, 452);
	TEAPOT_FACE(4, 473, 476, 462, 458);
	TEAPOT_FACE(4, 445, 446, 433, 432);
	TEAPOT_FACE(4, 446, 452, 435, 433);
	TEAPOT_FACE(4, 452, 458, 437, 435);
	TEAPOT_FACE(4, 458, 462, 439, 437);
	TEAPOT_FACE(4, 432, 433, 1, 0);
	TEAPOT_FACE(4, 433, 435, 4, 1);
	TEAPOT_FACE(4, 435, 437, 7, 4);
	TEAPOT_FACE(4, 437, 439, 9, 7);
	TEAPOT_FACE(4, 479, 478, 474, 476);
	TEAPOT_FACE(4, 478, 470, 468, 474);
	TEAPOT_FACE(4, 470, 464, 461, 468);
	TEAPOT_FACE(4, 464, 457, 454, 461);
	TEAPOT_FACE(4, 476, 474, 459, 462);
	TEAPOT_FACE(4, 474, 468, 453, 459);
	TEAPOT_FACE(4, 468, 461, 447, 453);
	TEAPOT_FACE(4, 461, 454, 445, 447);
	TEAPOT_FACE(4, 462, 459, 438, 439);
	TEAPOT_FACE(4, 459, 453, 436, 438);
	TEAPOT_FACE(4, 453, 447, 434, 436);
	TEAPOT_FACE(4, 447, 445, 432, 434);
	TEAPOT_FACE(4, 439, 438, 8, 9);
	TEAPOT_FACE(4, 438, 436, 5, 8);
	TEAPOT_FACE(4, 436, 434, 2, 5);
	TEAPOT_FACE(4, 434, 432, 0, 2);
	TEAPOT_FACE(4, 340, 342, 361, 360);
	TEAPOT_FACE(4, 342, 343, 363, 361);
	TEAPOT_FACE(4, 343, 341, 365, 363);
	TEAPOT_FACE(4, 341, 339, 368, 365);
	TEAPOT_FACE(4, 360, 361, 369, 367);
	TEAPOT_FACE(4, 361, 363, 372, 369);
	TEAPOT_FACE(4, 363, 365, 376, 372);
	TEAPOT_FACE(4, 365, 368, 380, 376);
	TEAPOT_FACE(4, 367, 369, 374, 371);
	TEAPOT_FACE(4, 369, 372, 378, 374);
	TEAPOT_FACE(4, 372, 376, 386, 378);
	TEAPOT_FACE(4, 376, 380, 392, 386);
	TEAPOT_FACE(4, 371, 374, 383, 381);
	TEAPOT_FACE(4, 374, 378, 400, 383);
	TEAPOT_FACE(4, 378, 386, 412, 400);
	TEAPOT_FACE(4, 386, 392, 416, 412);
	TEAPOT_FACE(4, 339, 344, 366, 368);
	TEAPOT_FACE(4, 344, 346, 364, 366);
	TEAPOT_FACE(4, 346, 345, 362, 364);
	TEAPOT_FACE(4, 345, 340, 360, 362);
	TEAPOT_FACE(4, 368, 366, 377, 380);
	TEAPOT_FACE(4, 366, 364, 373, 377);
	TEAPOT_FACE(4, 364, 362, 370, 373);
	TEAPOT_FACE(4, 362, 360, 367, 370);
	TEAPOT_FACE(4, 380, 377, 387, 392);
	TEAPOT_FACE(4, 377, 373, 379, 387);
	TEAPOT_FACE(4, 373, 370, 375, 379);
	TEAPOT_FACE(4, 370, 367, 371, 375);
	TEAPOT_FACE(4, 392, 387, 413, 416);
	TEAPOT_FACE(4, 387, 379, 402, 413);
	TEAPOT_FACE(4, 379, 375, 384, 402);
	TEAPOT_FACE(4, 375, 371, 381, 384);
	TEAPOT_FACE(4, 381, 383, 393, 382);
	TEAPOT_FACE(4, 383, 400, 403, 393);
	TEAPOT_FACE(4, 400, 412, 417, 403);
	TEAPOT_FACE(4, 412, 416, 422, 417);
	TEAPOT_FACE(4, 382, 393, 395, 388);
	TEAPOT_FACE(4, 393, 403, 407, 395);
	TEAPOT_FACE(4, 403, 417, 419, 407);
	TEAPOT_FACE(4, 417, 422, 423, 419);
	TEAPOT_FACE(4, 388, 395, 397, 389);
	TEAPOT_FACE(4, 395, 407, 405, 397);
	TEAPOT_FACE(4, 407, 419, 414, 405);
	TEAPOT_FACE(4, 419, 423, 421, 414);
	TEAPOT_FACE(4, 389, 397, 390, 385);
	TEAPOT_FACE(4, 397, 405, 399, 390);
	TEAPOT_FACE(4, 405, 414, 409, 399);
	TEAPOT_FACE(4, 414, 421, 411, 409);
	TEAPOT_FACE(4, 416, 413, 418, 422);
	TEAPOT_FACE(4, 413, 402, 404, 418);
	TEAPOT_FACE(4, 402, 384, 394, 404);
	TEAPOT_FACE(4, 384, 381, 382, 394);
	TEAPOT_FACE(4, 422, 418, 420, 423);
	TEAPOT_FACE(4, 418, 404, 408, 420);
	TEAPOT_FACE(4, 404, 394, 396, 408);
	TEAPOT_FACE(4, 394, 382, 388, 396);
	TEAPOT_FACE(4, 423, 420, 415, 421);
	TEAPOT_FACE(4, 420, 408, 406, 415);
	TEAPOT_FACE(4, 408, 396, 398, 406);
	TEAPOT_FACE(4, 396, 388, 389, 398);
	TEAPOT_FACE(4, 421, 415, 410, 411);
	TEAPOT_FACE(4, 415, 406, 401, 410);
	TEAPOT_FACE(4, 406, 398, 391, 401);
	TEAPOT_FACE(4, 398, 389, 385, 391);
	TEAPOT_FACE(3, 162, 231, 238);
	TEAPOT_FACE(3, 162, 227, 231);
	TEAPOT_FACE(3, 162, 211, 227);
	TEAPOT_FACE(3, 162, 166, 211);
	TEAPOT_FACE(4, 238, 231, 229, 237);
	TEAPOT_FACE(4, 231, 227, 225, 229);
	TEAPOT_FACE(4, 227, 211, 209, 225);
	TEAPOT_FACE(4, 211, 166, 165, 209);
	TEAPOT_FACE(4, 237, 229, 219, 223);
	TEAPOT_FACE(4, 229, 225, 213, 219);
	TEAPOT_FACE(4, 225, 209, 205, 213);
	TEAPOT_FACE(4, 209, 165, 163, 205);
	TEAPOT_FACE(4, 223, 219, 221, 224);
	TEAPOT_FACE(4, 219, 213, 215, 221);
	TEAPOT_FACE(4, 213, 205, 207, 215);
	TEAPOT_FACE(4, 205, 163, 164, 207);
	TEAPOT_FACE(3, 162, 154, 166);
	TEAPOT_FACE(3, 162, 138, 154);
	TEAPOT_FACE(3, 162, 134, 138);
	TEAPOT_FACE(3, 162, 128, 134);
	TEAPOT_FACE(4, 166, 154, 156, 165);
	TEAPOT_FACE(4, 154, 138, 140, 156);
	TEAPOT_FACE(4, 138, 134, 136, 140);
	TEAPOT_FACE(4, 134, 128, 129, 136);
	TEAPOT_FACE(4, 165, 156, 160, 163);
	TEAPOT_FACE(4, 156, 140, 152, 160);
	TEAPOT_FACE(4, 140, 136, 146, 152);
	TEAPOT_FACE(4, 136, 129, 143, 146);
	TEAPOT_FACE(4, 163, 160, 158, 164);
	TEAPOT_FACE(4, 160, 152, 150, 158);
	TEAPOT_FACE(4, 152, 146, 144, 150);
	TEAPOT_FACE(4, 146, 143, 142, 144);
	TEAPOT_FACE(3, 162, 135, 128);
	TEAPOT_FACE(3, 162, 139, 135);
	TEAPOT_FACE(3, 162, 155, 139);
	TEAPOT_FACE(3, 162, 187, 155);
	TEAPOT_FACE(4, 128, 135, 137, 129);
	TEAPOT_FACE(4, 135, 139, 141, 137);
	TEAPOT_FACE(4, 139, 155, 157, 141);
	TEAPOT_FACE(4, 155, 187, 186, 157);
	TEAPOT_FACE(4, 129, 137, 147, 143);
	TEAPOT_FACE(4, 137, 141, 153, 147);
	TEAPOT_FACE(4, 141, 157, 161, 153);
	TEAPOT_FACE(4, 157, 186, 184, 161);
	TEAPOT_FACE(4, 143, 147, 145, 142);
	TEAPOT_FACE(4, 147, 153, 151, 145);
	TEAPOT_FACE(4, 153, 161, 159, 151);
	TEAPOT_FACE(4, 161, 184, 185, 159);
	TEAPOT_FACE(3, 162, 212, 187);
	TEAPOT_FACE(3, 162, 228, 212);
	TEAPOT_FACE(3, 162, 232, 228);
	TEAPOT_FACE(3, 162, 238, 232);
	TEAPOT_FACE(4, 187, 212, 210, 186);
	TEAPOT_FACE(4, 212, 228, 226, 210);
	TEAPOT_FACE(4, 228, 232, 230, 226);
	TEAPOT_FACE(4, 232, 238, 237, 230);
	TEAPOT_FACE(4, 186, 210, 206, 184);
	TEAPOT_FACE(4, 210, 226, 214, 206);
	TEAPOT_FACE(4, 226, 230, 220, 214);
	TEAPOT_FACE(4, 230, 237, 223, 220);
	TEAPOT_FACE(4, 184, 206, 208, 185);
	TEAPOT_FACE(4, 206, 214, 216, 208);
	TEAPOT_FACE(4, 214, 220, 222, 216);
	TEAPOT_FACE(4, 220, 223, 224, 222);
	TEAPOT_FACE(4, 224, 221, 239, 243);
	TEAPOT_FACE(4, 221, 215, 235, 239);
	TEAPOT_FACE(4, 215, 207, 217, 235);
	TEAPOT_FACE(4, 207, 164, 167, 217);
	TEAPOT_FACE(4, 243, 239, 270, 278);
	TEAPOT_FACE(4, 239, 235, 254, 270);
	TEAPOT_FACE(4, 235, 217, 233, 254);
	TEAPOT_FACE(4, 217, 167, 168, 233);
	TEAPOT_FACE(4, 278, 270, 293, 297);
	TEAPOT_FACE(4, 270, 254, 276, 293);
	TEAPOT_FACE(4, 254, 233, 241, 276);
	TEAPOT_FACE(4, 233, 168, 169, 241);
	TEAPOT_FACE(4, 297, 293, 300, 310);
	TEAPOT_FACE(4, 293, 276, 279, 300);
	TEAPOT_FACE(4, 276, 241, 244, 279);
	TEAPOT_FACE(4, 241, 169, 170, 244);
	TEAPOT_FACE(4, 164, 158, 148, 167);
	TEAPOT_FACE(4, 158, 150, 130, 148);
	TEAPOT_FACE(4, 150, 144, 126, 130);
	TEAPOT_FACE(4, 144, 142, 123, 126);
	TEAPOT_FACE(4, 167, 148, 132, 168);
	TEAPOT_FACE(4, 148, 130, 111, 132);
	TEAPOT_FACE(4, 130, 126, 95, 111);
	TEAPOT_FACE(4, 126, 123, 88, 95);
	TEAPOT_FACE(4, 168, 132, 124, 169);
	TEAPOT_FACE(4, 132, 111, 89, 124);
	TEAPOT_FACE(4, 111, 95, 72, 89);
	TEAPOT_FACE(4, 95, 88, 69, 72);
	TEAPOT_FACE(4, 169, 124, 121, 170);
	TEAPOT_FACE(4, 124, 89, 86, 121);
	TEAPOT_FACE(4, 89, 72, 65, 86);
	TEAPOT_FACE(4, 72, 69, 56, 65);
	TEAPOT_FACE(4, 142, 145, 127, 123);
	TEAPOT_FACE(4, 145, 151, 131, 127);
	TEAPOT_FACE(4, 151, 159, 149, 131);
	TEAPOT_FACE(4, 159, 185, 188, 149);
	TEAPOT_FACE(4, 123, 127, 96, 88);
	TEAPOT_FACE(4, 127, 131, 112, 96);
	TEAPOT_FACE(4, 131, 149, 133, 112);
	TEAPOT_FACE(4, 149, 188, 189, 133);
	TEAPOT_FACE(4, 88, 96, 73, 69);
	TEAPOT_FACE(4, 96, 112, 90, 73);
	TEAPOT_FACE(4, 112, 133, 125, 90);
	TEAPOT_FACE(4, 133, 189, 190, 125);
	TEAPOT_FACE(4, 69, 73, 66, 56);
	TEAPOT_FACE(4, 73, 90, 87, 66);
	TEAPOT_FACE(4, 90, 125, 122, 87);
	TEAPOT_FACE(4, 125, 190, 191, 122);
	TEAPOT_FACE(4, 185, 208, 218, 188);
	TEAPOT_FACE(4, 208, 216, 236, 218);
	TEAPOT_FACE(4, 216, 222, 240, 236);
	TEAPOT_FACE(4, 222, 224, 243, 240);
	TEAPOT_FACE(4, 188, 218, 234, 189);
	TEAPOT_FACE(4, 218, 236, 255, 234);
	TEAPOT_FACE(4, 236, 240, 271, 255);
	TEAPOT_FACE(4, 240, 243, 278, 271);
	TEAPOT_FACE(4, 189, 234, 242, 190);
	TEAPOT_FACE(4, 234, 255, 277, 242);
	TEAPOT_FACE(4, 255, 271, 294, 277);
	TEAPOT_FACE(4, 271, 278, 297, 294);
	TEAPOT_FACE(4, 190, 242, 245, 191);
	TEAPOT_FACE(4, 242, 277, 280, 245);
	TEAPOT_FACE(4, 277, 294, 301, 280);
	TEAPOT_FACE(4, 294, 297, 310, 301);
	}

	#define TEAPOT_RENDER_ID 9001

	#define SKY_CYAN 0xFF, 0x67, 0xE1, 0xF6

	flatbuffers::FlatBufferBuilder fbBuilder;
	auto color = rlbot::flat::CreateColor(fbBuilder, SKY_CYAN);
	std::vector<flatbuffers::Offset<rlbot::flat::RenderMessage>> messages;

	int batch = 0;

	for (auto face : faces) {
		auto face_vertex_list = std::get<1>(face);
		auto v1 = verticies.at(face_vertex_list.at(0));
		auto v2 = verticies.at(face_vertex_list.at(1));
		auto v3 = verticies.at(face_vertex_list.at(2));
		// Three points
		auto l1 = rlbot::flat::CreateRenderMessageDirect(fbBuilder,
			rlbot::flat::RenderType::RenderType_DrawLine3D,
			color, &v1, &v2, 1, 1);
		auto l2 = rlbot::flat::CreateRenderMessageDirect(fbBuilder,
			rlbot::flat::RenderType::RenderType_DrawLine3D,
			color, &v2, &v3, 1, 1);
		messages.push_back(l1);
		messages.push_back(l2);
		if (std::get<0>(face) == 4) {
			// Four points
			auto v4 = verticies.at(face_vertex_list.at(3));
			auto l3 = rlbot::flat::CreateRenderMessageDirect(fbBuilder,
				rlbot::flat::RenderType::RenderType_DrawLine3D,
				color, &v3, &v4, 1, 1);
			messages.push_back(l3);
			auto l4 = rlbot::flat::CreateRenderMessageDirect(fbBuilder,
				rlbot::flat::RenderType::RenderType_DrawLine3D,
				color, &v4, &v1, 1, 1);
			messages.push_back(l4);
		}
		else {
			auto l3 = rlbot::flat::CreateRenderMessageDirect(fbBuilder,
				rlbot::flat::RenderType::RenderType_DrawLine3D,
				color, &v3, &v1, 1, 1);
			messages.push_back(l3);
		}
		auto renderGroup = rlbot::flat::CreateRenderGroupDirect(fbBuilder, &messages, TEAPOT_RENDER_ID + batch++);
		fbBuilder.Finish(renderGroup);
		auto pointer = fbBuilder.GetBufferPointer();
		auto size = fbBuilder.GetSize();
		std::cout << "Teapot message size: " << size << ", batch: " << batch << "\n";

		if (batch > 2) {
			RenderGroup(pointer, size);
		}
		fbBuilder.Clear(); 
		color = rlbot::flat::CreateColor(fbBuilder, SKY_CYAN);
		messages.clear();
	}

}
